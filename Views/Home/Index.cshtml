@model Online.Models.IndexViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Gestione Macchine";

    var openEditModalWithErrorRazor = TempData["OpenEditModal"] as bool? ?? false;
    Online.Models.MacchinaEditModel modalEditModel;

    if (openEditModalWithErrorRazor)
    {
        modalEditModel = new Online.Models.MacchinaEditModel
        {
            OriginalNomeMacchina = TempData["EditModel_OriginalNomeMacchina"] as string,
            OriginalIP_Address = TempData["EditModel_OriginalIP_Address"] as string,
            NomeMacchina = TempData["EditModel_NomeMacchina"] as string,
            IP_Address = TempData["EditModel_IP_Address"] as string
        };
        TempData.Keep("EditModel_OriginalNomeMacchina");
        TempData.Keep("EditModel_OriginalIP_Address");
        TempData.Keep("EditModel_NomeMacchina");
        TempData.Keep("EditModel_IP_Address");
    }
    else
    {
        modalEditModel = new Online.Models.MacchinaEditModel();
    }

    Dictionary<string, string[]> modalValidationErrors = null;
    var editErrorsJson = TempData["EditErrors_Json"] as string;
    if (!string.IsNullOrEmpty(editErrorsJson))
    {
        try
        {
            modalValidationErrors = JsonSerializer.Deserialize<Dictionary<string, string[]>>(editErrorsJson);
        }
        catch (JsonException jsonEx)
        {
            System.Diagnostics.Debug.WriteLine($"Errore deserializzazione EditErrors_Json: {jsonEx.Message}");
            modalValidationErrors = new Dictionary<string, string[]>();
        }
    }
    TempData.Keep("EditErrors_Json");
}

<style>
    /* === Tema Scuro Generale === */
    body {
        background-color: #1a1a1a;
        color: #e0e0e0;
    }

    h3, h4 {
        color: #fff;
    }

    /* === Card Dark === */
    .card {
        background-color: #2d2d2d !important;
        border: 1px solid #404040;
        border-radius: 8px;
    }

    .card-header {
        background-color: #333 !important;
        color: #fff !important;
        border-bottom: 1px solid #404040;
    }

    .card-body {
        background-color: #2d2d2d !important;
    }

    /* === Form Controls Dark === */
    .form-control {
        background-color: #333;
        color: #e0e0e0;
        border: 1px solid #555;
    }

        .form-control:focus {
            background-color: #333;
            color: #e0e0e0;
            border-color: #64b5f6;
            box-shadow: 0 0 0 .25rem rgba(100,181,246,.25);
        }

    .form-label {
        color: #b0b0b0;
    }

    .form-text.text-muted {
        color: #888 !important;
    }

    /* === Alert Dark === */
    .alert-success {
        background-color: #2e7d32;
        color: #e8f5e9;
        border-color: #388e3c;
    }

    .alert-danger {
        background-color: #c62828;
        color: #ffebee;
        border-color: #d32f2f;
    }

    .alert .btn-close {
        filter: invert(1) grayscale(100%) brightness(200%);
    }

    /* === Modal Dark === */
    .modal-content {
        background-color: #2d2d2d;
        border: 1px solid #404040;
        border-radius: 12px;
    }

    .modal-header {
        border-bottom: 1px solid #404040;
        background-color: #333;
        color: #fff;
    }

        .modal-header.bg-danger {
            background-color: #c62828 !important;
        }

    .modal-title {
        color: #fff;
        font-weight: 600;
    }

    .btn-close {
        filter: invert(1);
        opacity: .8;
    }

    .modal-body {
        background-color: #2d2d2d;
    }

    .modal-footer {
        border-top: 1px solid #404040;
    }

    /* === Bottoni Iconici === */
    .btn-icon svg, .btn-icon-text svg {
        width: 1em;
        height: 1em;
        vertical-align: -0.125em;
        fill: currentColor;
    }

    .btn-icon-text svg {
        margin-right: .35rem;
    }

    /* === Bottoni Outline Personalizzati === */
    .btn-outline-custom-blue, .btn-outline-custom-red, .btn-outline-custom-green {
        background-color: transparent;
        padding: .375rem .75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: .25rem;
        transition: .15s ease-in-out;
    }

    .btn-outline-custom-blue {
        border: 1px solid #64b5f6;
        color: #64b5f6;
    }

        .btn-outline-custom-blue:hover {
            background-color: #64b5f6;
            color: #1a1a1a;
        }

    .btn-outline-custom-red {
        border: 1px solid #e57373;
        color: #e57373;
    }

        .btn-outline-custom-red:hover {
            background-color: #e57373;
            color: #1a1a1a;
        }

    .btn-outline-custom-green {
        border: 1px solid #81c784;
        color: #81c784;
    }

        .btn-outline-custom-green:hover {
            background-color: #81c784;
            color: #1a1a1a;
        }

    /* === TABELLA SCURA PERSONALIZZATA === */
    .table-minimal {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        border: 1px solid #404040;
        border-radius: 8px;
        overflow: hidden;
        /* FORZA sfondo scuro sul table intero */
        background-color: #2d2d2d !important;
    }

        .table-minimal thead th {
            background-color: #333 !important;
            color: #fff !important;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            font-size: .9rem;
            text-transform: uppercase;
            letter-spacing: .5px;
            border-bottom: 1px solid #404040;
        }

        .table-minimal tbody tr {
            transition: background-color .2s ease-in-out;
        }

        .table-minimal td,
        .table-minimal th {
            /* FORZA sfondo scuro anche su ogni cella */
            background-color: #2d2d2d !important;
            color: #e0e0e0 !important;
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #404040;
        }

        .table-minimal tbody tr:last-child td {
            border-bottom: none;
        }

        .table-minimal tbody tr:not(.status-offline):hover {
            background-color: #3c3c3c !important;
            color: #fff !important;
        }

        .table-minimal tbody tr.status-offline {
            background-color: rgba(229,115,115,.15) !important;
        }

            .table-minimal tbody tr.status-offline:hover {
                background-color: rgba(229,115,115,.25) !important;
            }

            .table-minimal tbody tr.status-offline td {
                color: #f7a1a1 !important;
            }
</style>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3>@ViewData["Title"]</h3>
                <!-- FIX: Changed from <a> tag to a <form> for more reliable CSV export -->
                <form asp-action="ExportToCsv" method="get" class="d-inline">
                    <button type="submit" class="btn btn-outline-custom-blue btn-sm btn-icon-text">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-spreadsheet" viewBox="0 0 16 16">
                            <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2M9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5z" />
                            <path d="M2 6h12v2H2zm0 3h12v2H2zm0 3h12v2H2z" />
                        </svg>
                        Esporta CSV
                    </button>
                </form>
            </div>
            <table class="table table-hover table-minimal" id="macchineTable">
                <thead>
                    <tr>
                        <th class="sortable" data-column="0" data-sort-type="alpha">Nome Macchina <span class="sort-arrow"></span></th>
                        <th class="sortable" data-column="1" data-sort-type="ip">Indirizzo IP <span class="sort-arrow"></span></th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody id="macchineTableBody">
                    @if (Model.Macchine != null && Model.Macchine.Any())
                    {
                        @foreach (var item in Model.Macchine)
                        {
                            <tr id="row-@item.NomeMacchina.Replace(" ", "-").Replace('.', '-')-@item.IP_Address.Replace('.', '-')"
                                data-ip="@item.IP_Address"
                                data-nome-macchina="@item.NomeMacchina">
                                <td>@Html.DisplayFor(m => item.NomeMacchina)</td>
                                <td>@Html.DisplayFor(m => item.IP_Address)</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-outline-custom-blue me-1 edit-macchina-btn btn-icon"
                                            data-bs-toggle="modal" data-bs-target="#editMacchinaModal"
                                            data-nome-macchina="@item.NomeMacchina"
                                            data-ip-address="@item.IP_Address"
                                            title="Modifica">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                                            <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
                                        </svg>
                                    </button>
                                    <form asp-action="Delete" method="post" class="delete-form d-inline"
                                          data-nome-macchina="@item.NomeMacchina" data-ip-address="@item.IP_Address">
                                        <input type="hidden" name="nomeMacchina" value="@item.NomeMacchina" />
                                        <input type="hidden" name="ipAddress" value="@item.IP_Address" />
                                        @Html.AntiForgeryToken()
                                        <button type="button" class="btn btn-sm btn-outline-custom-red btn-icon open-delete-modal-btn"
                                                title="Elimina"
                                                data-bs-toggle="modal" data-bs-target="#deleteConfirmModal">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                            </svg>
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center">Nessuna macchina presente.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- COLONNA DESTRA: AGGIUNGI & IMPORTA -->
        <div class="col-md-4">
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h4 class="mb-0">Aggiungi Nuova Macchina</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        @Html.AntiForgeryToken()
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <div class="mb-3">
                            <label asp-for="NuovaMacchina.NomeMacchina" class="form-label"></label>
                            <input asp-for="NuovaMacchina.NomeMacchina" class="form-control" />
                            <span asp-validation-for="NuovaMacchina.NomeMacchina" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="NuovaMacchina.IP_Address" class="form-label"></label>
                            <input asp-for="NuovaMacchina.IP_Address" class="form-control" />
                            <span asp-validation-for="NuovaMacchina.IP_Address" class="text-danger"></span>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-outline-custom-green">Aggiungi Macchina</button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="card shadow">
                <div class="card-header">
                    <h4 class="mb-0">Importa Macchine da CSV</h4>
                </div>
                <div class="card-body">
                    <form asp-action="ImportFromCsv" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label for="csvFile" class="form-label">Seleziona file CSV:</label>
                            <input type="file" name="csvFile" id="csvFile" class="form-control" accept=".csv" required />
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-outline-custom-blue btn-icon-text">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-upload" viewBox="0 0 16 16">
                                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5" />
                                    <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708z" />
                                </svg>
                                Importa CSV
                            </button>
                        </div>
                        <small class="form-text text-muted mt-2 d-block">
                            Il file CSV deve avere le colonne 'NomeMacchina' e 'IP_Address' (in quest'ordine).
                        </small>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- MODALE EDIT -->
<div class="modal fade" id="editMacchinaModal" tabindex="-1" aria-labelledby="editMacchinaModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form asp-controller="Home" asp-action="Edit" method="post" id="editMacchinaForm">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="editMacchinaModalLabel">Modifica Macchina</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (openEditModalWithErrorRazor && modalValidationErrors != null && modalValidationErrors.TryGetValue(string.Empty, out var modelErrors))
                    {
                        <div class="text-danger mb-3">
                            <ul>
                                @foreach (var error in modelErrors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }
                    <input type="hidden" asp-for="@modalEditModel.OriginalNomeMacchina" id="editOriginalNomeMacchina" />
                    <input type="hidden" asp-for="@modalEditModel.OriginalIP_Address" id="editOriginalIPAddress" />

                    <div class="mb-3">
                        <label for="editNomeMacchina" class="form-label">Nome Macchina</label>
                        <input asp-for="@modalEditModel.NomeMacchina" class="form-control" id="editNomeMacchina" />
                        @if (openEditModalWithErrorRazor && modalValidationErrors != null && modalValidationErrors.TryGetValue("NomeMacchina", out var nomeErrors))
                        {
                            @foreach (var e in nomeErrors)
                            {
                                <span class="text-danger d-block">@e</span>
                            }
                        }
                        <span asp-validation-for="@modalEditModel.NomeMacchina" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editIPAddress" class="form-label">Indirizzo IP</label>
                        <input asp-for="@modalEditModel.IP_Address" class="form-control" id="editIPAddress" />
                        @if (openEditModalWithErrorRazor && modalValidationErrors != null && modalValidationErrors.TryGetValue("IP_Address", out var ipErrors))
                        {
                            @foreach (var e in ipErrors)
                            {
                                <span class="text-danger d-block">@e</span>
                            }
                        }
                        <span asp-validation-for="@modalEditModel.IP_Address" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-custom-red" data-bs-dismiss="modal">Annulla</button>
                    <button type="submit" class="btn btn-outline-custom-green">Salva Modifiche</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- MODALE DELETE -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Conferma Eliminazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Sei sicuro di voler eliminare la macchina:</p>
                <p><strong id="deleteMachineNameDisplay"></strong> (<strong id="deleteMachineIpDisplay"></strong>)?</p>
                <p class="text-danger small">Questa azione è irreversibile.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-custom-blue" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-outline-custom-red" id="confirmDeleteButton">Elimina</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const openEditModalWithErrorJS = @Html.Raw(Json.Serialize(openEditModalWithErrorRazor));
        const csrfTokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        const csrfToken = csrfTokenElement ? csrfTokenElement.value : null;
        if (!csrfToken && document.querySelector('form[method="post"]')) {
             console.warn("Token CSRF non trovato! Le azioni POST potrebbero fallire.");
        }

        document.addEventListener('DOMContentLoaded', function () {
            // ---- Gestione Modale Edit ----
            var editMacchinaModalEl = document.getElementById('editMacchinaModal');
            var editMacchinaModal   = new bootstrap.Modal(editMacchinaModalEl);
            var editForm            = document.getElementById('editMacchinaForm');

            document.querySelectorAll('.edit-macchina-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    var nome = this.dataset.nomeMacchina;
                    var ip   = this.dataset.ipAddress;
                    document.getElementById('editOriginalNomeMacchina').value = nome;
                    document.getElementById('editOriginalIPAddress').value   = ip;
                    document.getElementById('editNomeMacchina').value        = nome;
                    document.getElementById('editIPAddress').value           = ip;

                    // pulisco eventuali errori precedenti
                    editForm.querySelectorAll('.text-danger.d-block').forEach(e => e.remove());
                    editForm.querySelectorAll('span[data-valmsg-for]').forEach(s => s.textContent = '');
                    var sum = editForm.querySelector('.modal-body > .text-danger.mb-3');
                    if (sum) sum.innerHTML = '';

                    editMacchinaModal.show();
                });
            });

            // ---- Gestione Modale Delete ----
            var deleteModalEl  = document.getElementById('deleteConfirmModal');
            var deleteModal    = new bootstrap.Modal(deleteModalEl);
            var formToDelete   = null;

            document.querySelectorAll('.open-delete-modal-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    formToDelete = this.closest('form.delete-form');
                    if (formToDelete) {
                        document.getElementById('deleteMachineNameDisplay').textContent = formToDelete.dataset.nomeMacchina;
                        document.getElementById('deleteMachineIpDisplay').textContent   = formToDelete.dataset.ipAddress;
                        deleteModal.show();
                    }
                });
            });

            document.getElementById('confirmDeleteButton').addEventListener('click', function () {
                if (formToDelete) formToDelete.submit();
                deleteModal.hide();
            });

            // ---- Auto-close Alert ----
            setTimeout(() => {
                document.querySelectorAll('.alert-dismissible').forEach(a => {
                    if (a) new bootstrap.Alert(a).close();
                });
            }, 7000);

            // riapri edit se ci sono errori lato server
            if (openEditModalWithErrorJS) {
                editMacchinaModal.show();
            }

            // ---- Ping Automatico e notifica ----
            const PING_INTERVAL = 10000;
            const tbody = document.getElementById('macchineTableBody');
            let clientStatus = {};

            async function notifyServer(nome, ip, online) {
                if (!csrfToken) return;
                try {
                    await fetch('/Home/NotifyTelegramOfStatusChange', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': csrfToken
                        },
                        body: JSON.stringify({ NomeMacchina: nome, IpAddress: ip, IsNowOnline: online })
                    });
                } catch (e) {
                    console.error('Notify error:', e);
                }
            }

            async function checkIp(ip, nome, rowId) {
                const row = document.getElementById(rowId);
                if (!row) return;
                let isOnline = false;
                try {
                    const resp = await fetch(`/Home/PingIpAddress?ipAddress=${encodeURIComponent(ip)}`);
                    if (resp.ok) {
                        const data = await resp.json();
                        isOnline = data.reachable;
                    }
                } catch {
                    isOnline = false;
                }
                if (clientStatus[ip] !== isOnline) {
                    await notifyServer(nome, ip, isOnline);
                    clientStatus[ip] = isOnline;
                }
                row.classList.toggle('status-offline', !isOnline);
            }

            function doAllPings() {
                if (!tbody) return;
                tbody.querySelectorAll('tr[data-ip]').forEach(row => {
                    checkIp(row.dataset.ip, row.dataset.nomeMacchina, row.id);
                });
            }

            if (tbody && tbody.querySelectorAll('tr[data-ip]').length) {
                doAllPings();
                setInterval(doAllPings, PING_INTERVAL);
            }

            // ---- Ordinamento Colonne ----
            const table = document.getElementById('macchineTable');
            if (table) {
                const headers = table.querySelectorAll('thead th.sortable');
                const tBody   = table.querySelector('tbody');

                headers.forEach(header => {
                    header.addEventListener('click', () => {
                        const colIndex  = parseInt(header.dataset.column, 10);
                        const sortType  = header.dataset.sortType;
                        const asc       = !header.classList.contains('sorted-asc');
                        headers.forEach(h => {
                            h.classList.remove('sorted-asc','sorted-desc','sorted');
                            h.querySelector('.sort-arrow').textContent = '';
                        });
                        header.classList.add('sorted', asc ? 'sorted-asc' : 'sorted-desc');
                        header.querySelector('.sort-arrow').textContent = asc ? '▲' : '▼';

                        const rows = Array.from(tBody.querySelectorAll('tr'));
                        rows.sort((a,b) => {
                            const aText = a.children[colIndex].textContent.trim();
                            const bText = b.children[colIndex].textContent.trim();
                            let cmp = 0;
                            if (sortType === 'ip') {
                                const A = aText.split('.').map(Number);
                                const B = bText.split('.').map(Number);
                                for (let i=0; i<4; i++) {
                                    if (A[i] < B[i]) { cmp = -1; break; }
                                    if (A[i] > B[i]) { cmp = 1; break; }
                                }
                            } else {
                                cmp = aText.localeCompare(bText, undefined, { numeric: true, sensitivity: 'base' });
                            }
                            return asc ? cmp : -cmp;
                        });
                        rows.forEach(r => tBody.appendChild(r));
                    });
                });
            }
        });
    </script>
}
