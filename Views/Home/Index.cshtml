@model Online.Models.IndexViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Gestione Macchine";

    var openEditModalWithErrorRazor = TempData["OpenEditModal"] as bool? ?? false;
    Online.Models.MacchinaEditModel modalEditModel;

    if (openEditModalWithErrorRazor)
    {
        modalEditModel = new Online.Models.MacchinaEditModel
        {
            OriginalNomeMacchina = TempData["EditModel_OriginalNomeMacchina"] as string,
            OriginalIP_Address = TempData["EditModel_OriginalIP_Address"] as string,
            NomeMacchina = TempData["EditModel_NomeMacchina"] as string,
            IP_Address = TempData["EditModel_IP_Address"] as string
        };
        TempData.Keep("EditModel_OriginalNomeMacchina");
        TempData.Keep("EditModel_OriginalIP_Address");
        TempData.Keep("EditModel_NomeMacchina");
        TempData.Keep("EditModel_IP_Address");
    }
    else
    {
        modalEditModel = new Online.Models.MacchinaEditModel();
    }

    Dictionary<string, string[]> modalValidationErrors = null;
    var editErrorsJson = TempData["EditErrors_Json"] as string;
    if (!string.IsNullOrEmpty(editErrorsJson))
    {
        try
        {
            modalValidationErrors = JsonSerializer.Deserialize<Dictionary<string, string[]>>(editErrorsJson);
        }
        catch (JsonException jsonEx)
        {
            System.Diagnostics.Debug.WriteLine($"Errore deserializzazione EditErrors_Json: {jsonEx.Message}");
            modalValidationErrors = new Dictionary<string, string[]>();
        }
    }
    TempData.Keep("EditErrors_Json");
}

@* HEAD Section Recommendation:
    For best results, include this in your main _Layout.cshtml <head> section.
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
*@
<style>
    /* =========================================
        === PREMIUM DARK THEME - V2.3         ===
        =========================================
        * Font: Inter (Modern, professional sans-serif)
        * Colors: Defined as CSS variables for consistency and easy customization.
        * Spacing: Increased padding and consistent margins for a cleaner, more breathable layout.
        * Borders: Softer, semi-transparent borders for a less harsh look.
        * Transitions: Added for smooth interactions on hover/focus states.
        * Shadows: Subtle shadows to give depth to cards and modals.
        */

    /* === 1. CSS VARIABLES & GLOBAL STYLES === */
    :root {
        --font-family-main: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        --bg-main: #1a1a1a;
        --bg-card: #1F2937;
        --bg-header: #374151;
        --bg-hover: #374151;
        --text-primary: #F9FAFB;
        --text-secondary: #9CA3AF;
        --text-placeholder: #6B7280;
        --border-color: rgba(255, 255, 255, 0.1);
        --border-radius-main: 0.5rem;
        --border-radius-small: 0.25rem;
        --shadow-main: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
        --accent-blue: #3B82F6;
        --accent-green: #22C55E;
        --accent-red: #EF4444;
        --accent-yellow: #F59E0B;
        --accent-blue-hover: #60A5FA;
        --accent-green-hover: #4ADE80;
        --accent-red-hover: #F87171;
    }

    body {
        background-color: var(--bg-main);
        color: var(--text-primary);
        font-family: var(--font-family-main);
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    h3, h4 {
        color: var(--text-primary);
        font-weight: 600;
    }

    /* === 2. CARD & FORM STYLES === */
    .card {
        background-color: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-main);
        box-shadow: var(--shadow-main);
        transition: box-shadow 0.2s ease-in-out;
    }

        .card:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
        }

    .card-header {
        background-color: transparent;
        color: var(--text-primary);
        border-bottom: 1px solid var(--border-color);
        padding: 1rem 1.5rem;
    }

    .card-body {
        background-color: transparent;
        padding: 1.5rem;
    }

    .form-label {
        color: var(--text-secondary);
        font-size: 0.875rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .form-control {
        background-color: var(--bg-main);
        color: var(--text-primary);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-small);
        padding: 0.75rem 1rem;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        .form-control:focus {
            background-color: var(--bg-main);
            color: var(--text-primary);
            border-color: var(--accent-blue);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
        }

        .form-control::placeholder {
            color: var(--text-placeholder);
        }

    /* === 3. BUTTONS === */
    .btn {
        border-radius: var(--border-radius-small);
        font-weight: 600;
        padding: 0.5rem 1rem;
        transition: all 0.2s ease-in-out;
        border-width: 1px;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    .btn-icon, .btn-icon-text {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

        .btn-icon svg, .btn-icon-text svg {
            width: 1.15em;
            height: 1.15em;
        }

        .btn-icon-text svg {
            margin-right: 0.5rem;
        }

    .btn-outline-premium {
        background-color: transparent;
        color: var(--color-base);
        border-color: var(--color-base);
    }

        .btn-outline-premium:hover, .btn-outline-premium:focus {
            background-color: var(--color-hover);
            color: var(--text-primary);
            border-color: var(--color-hover);
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

    .btn-blue {
        --color-base: var(--accent-blue);
        --color-hover: var(--accent-blue-hover);
    }

    .btn-green {
        --color-base: var(--accent-green);
        --color-hover: var(--accent-green-hover);
    }

    .btn-red {
        --color-base: var(--accent-red);
        --color-hover: var(--accent-red-hover);
    }

    .btn.d-grid, .d-grid > .btn {
        padding-top: 0.75rem;
        padding-bottom: 0.75rem;
    }

    /* === 4. TABLE STYLES === */
    .table-premium {
        width: 100%;
        border-collapse: collapse;
        background-color: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-main);
        overflow: hidden;
    }

        .table-premium thead th {
            background-color: var(--bg-header);
            color: var(--text-secondary);
            padding: 0.75rem 1.5rem;
            text-align: left;
            font-weight: 600;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 1px solid var(--border-color);
        }

        .table-premium tbody tr {
            border-bottom: 1px solid var(--border-color);
            transition: background-color 0.2s ease-in-out;
        }

            .table-premium tbody tr:last-child {
                border-bottom: none;
            }

            .table-premium tbody tr:hover {
                background-color: var(--bg-hover);
            }

        .table-premium td {
            color: var(--text-primary);
            padding: 1rem 1.5rem;
            vertical-align: middle;
        }

        .table-premium tr.status-offline td:not(:last-child) {
            color: var(--text-secondary);
        }

    .sortable {
        cursor: pointer;
    }

    .sort-arrow {
        display: inline-block;
        width: 1em;
        text-align: center;
        color: var(--text-secondary);
    }

    /* MODIFIED: Status Badge Styling */
    .status-badge {
        display: inline-block;
        padding: 0.25em 0.6em;
        font-size: 0.75rem; /* 12px */
        font-weight: 600;
        line-height: 1.2;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: var(--border-radius-small);
        text-transform: uppercase;
        color: #fff;
        background-color: var(--text-placeholder); /* Default state */
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .status-badge.online {
            color: #E0F2F1;
            background-color: rgba(34, 197, 94, 0.25);
        }

        .status-badge.offline {
            color: #FFCDD2;
            background-color: rgba(239, 68, 68, 0.25);
        }


    /* === 5. MODAL & ALERT STYLES === */
    .modal-content {
        background-color: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-main);
        box-shadow: var(--shadow-main);
    }

    .modal-header {
        border-bottom: 1px solid var(--border-color);
        background-color: var(--bg-header);
    }

        .modal-header.bg-danger {
            background-color: var(--accent-red) !important;
        }

    .btn-close {
        filter: invert(0.8);
    }

    .alert {
        border-radius: var(--border-radius-small);
        border-width: 1px;
        border-style: solid;
    }

    .alert-success {
        background-color: rgba(34, 197, 94, 0.1);
        color: #A7F3D0;
        border-color: var(--accent-green);
    }

    .alert-danger {
        background-color: rgba(239, 68, 68, 0.1);
        color: #FECACA;
        border-color: var(--accent-red);
    }

    .alert .btn-close {
        filter: none;
    }

</style>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container-fluid mt-4">
    <div class="row gx-4">
        <!-- COLONNA SINISTRA: TABELLA -->
        <div class="col-lg-8">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3 class="mb-0">@ViewData["Title"]</h3>
                <form asp-action="ExportToCsv" method="get" class="d-inline">
                    <button type="submit" class="btn btn-sm btn-outline-premium btn-blue btn-icon-text">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-spreadsheet" viewBox="0 0 16 16"><path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2M9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5z" /><path d="M2 6h12v2H2zm0 3h12v2H2zm0 3h12v2H2z" /></svg>
                        Esporta CSV
                    </button>
                </form>
            </div>
            <div class="card">
                <table class="table-premium" id="macchineTable">
                    <thead>
                        <tr>
                            <th>Stato</th>
                            <th class="sortable" data-column="1" data-sort-type="alpha">Nome Macchina <span class="sort-arrow"></span></th>
                            <th class="sortable" data-column="2" data-sort-type="ip">Indirizzo IP <span class="sort-arrow"></span></th>
                            <th class="text-end">Azioni</th>
                        </tr>
                    </thead>
                    <tbody id="macchineTableBody">
                        @if (Model.Macchine != null && Model.Macchine.Any())
                        {
                            @foreach (var item in Model.Macchine)
                            {
                                <tr id="row-@item.NomeMacchina.Replace(" ", "-").Replace('.', '-')-@item.IP_Address.Replace('.', '-')"
                                    data-ip="@item.IP_Address"
                                    data-nome-macchina="@item.NomeMacchina">
                                    <td>
                                        <span class="status-badge" title="Stato sconosciuto">Verifica...</span>
                                    </td>
                                    <td>@Html.DisplayFor(m => item.NomeMacchina)</td>
                                    <td>@Html.DisplayFor(m => item.IP_Address)</td>
                                    <td class="text-end">
                                        <button type="button" class="btn btn-sm btn-icon btn-outline-premium btn-blue me-1 edit-macchina-btn"
                                                data-bs-toggle="modal" data-bs-target="#editMacchinaModal"
                                                data-nome-macchina="@item.NomeMacchina"
                                                data-ip-address="@item.IP_Address"
                                                title="Modifica">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16"><path fill="currentColor" d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" /></svg>
                                        </button>
                                        <form asp-action="Delete" method="post" class="delete-form d-inline"
                                              data-nome-macchina="@item.NomeMacchina" data-ip-address="@item.IP_Address">
                                            <input type="hidden" name="nomeMacchina" value="@item.NomeMacchina" />
                                            <input type="hidden" name="ipAddress" value="@item.IP_Address" />
                                            @Html.AntiForgeryToken()
                                            <button type="button" class="btn btn-sm btn-icon btn-outline-premium btn-red open-delete-modal-btn"
                                                    title="Elimina"
                                                    data-bs-toggle="modal" data-bs-target="#deleteConfirmModal">
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16"><path fill="currentColor" d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" /><path fill="currentColor" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" /></svg>
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center py-5">
                                    <h5 class="text-secondary">Nessuna macchina presente.</h5>
                                    <p class="text-secondary">Aggiungine una dal pannello a destra.</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- COLONNA DESTRA: AGGIUNGI & IMPORTA -->
        <div class="col-lg-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h4 class="mb-0">Aggiungi Macchina</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        @Html.AntiForgeryToken()
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3 small"></div>

                        <div class="mb-3">
                            <label asp-for="NuovaMacchina.NomeMacchina" class="form-label"></label>
                            <input asp-for="NuovaMacchina.NomeMacchina" class="form-control" placeholder="es. Server Principale" />
                            <span asp-validation-for="NuovaMacchina.NomeMacchina" class="text-danger small"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="NuovaMacchina.IP_Address" class="form-label"></label>
                            <input asp-for="NuovaMacchina.IP_Address" class="form-control" placeholder="es. 192.168.1.10" />
                            <span asp-validation-for="NuovaMacchina.IP_Address" class="text-danger small"></span>
                        </div>

                        <div class="d-grid mt-4">
                            <button type="submit" class="btn btn-outline-premium btn-green">Aggiungi Macchina</button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Importa da CSV</h4>
                </div>
                <div class="card-body">
                    <form asp-action="ImportFromCsv" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label for="csvFile" class="form-label">Seleziona file CSV</label>
                            <input type="file" name="csvFile" id="csvFile" class="form-control" accept=".csv" required />
                        </div>
                        <div class="d-grid mt-4">
                            <button type="submit" class="btn btn-outline-premium btn-blue btn-icon-text">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-upload" viewBox="0 0 16 16"><path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5" /><path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708z" /></svg>
                                Importa
                            </button>
                        </div>
                        <small class="form-text text-secondary mt-2 d-block">
                            Il file deve avere le colonne 'NomeMacchina' e 'IP_Address'.
                        </small>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- MODALE EDIT -->
<div class="modal fade" id="editMacchinaModal" tabindex="-1" aria-labelledby="editMacchinaModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form asp-controller="Home" asp-action="Edit" method="post" id="editMacchinaForm">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="editMacchinaModalLabel">Modifica Macchina</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (openEditModalWithErrorRazor && modalValidationErrors != null && modalValidationErrors.TryGetValue(string.Empty, out var modelErrors))
                    {
                        <div class="alert alert-danger">
                            <ul class="mb-0 ps-3">@foreach (var error in modelErrors) {
                            <li>@error</li>
                        }
</ul>
                    </div>
                                        }
                    <input type="hidden" asp-for="@modalEditModel.OriginalNomeMacchina" id="editOriginalNomeMacchina" />
                    <input type="hidden" asp-for="@modalEditModel.OriginalIP_Address" id="editOriginalIPAddress" />

                    <div class="mb-3">
                        <label for="editNomeMacchina" class="form-label">Nome Macchina</label>
                        <input asp-for="@modalEditModel.NomeMacchina" class="form-control" id="editNomeMacchina" />
                        @if (openEditModalWithErrorRazor && modalValidationErrors != null && modalValidationErrors.TryGetValue("NomeMacchina", out var nomeErrors))
                        {
                            <div class="text-danger small mt-1">@foreach (var e in nomeErrors) {
                            <span>@e</span>
                        }
</div>
                                                }
                    </div>
                    <div class="mb-3">
                        <label for="editIPAddress" class="form-label">Indirizzo IP</label>
                        <input asp-for="@modalEditModel.IP_Address" class="form-control" id="editIPAddress" />
                        @if (openEditModalWithErrorRazor && modalValidationErrors != null && modalValidationErrors.TryGetValue("IP_Address", out var ipErrors))
                        {
                            <div class="text-danger small mt-1">@foreach (var e in ipErrors) {
                            <span>@e</span>
                        }
</div>
                                                }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-premium btn-red" data-bs-dismiss="modal">Annulla</button>
                    <button type="submit" class="btn btn-outline-premium btn-green">Salva Modifiche</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- MODALE DELETE -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Conferma Eliminazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Sei sicuro di voler eliminare la macchina?</p>
                <div class="p-3 rounded mb-3" style="background-color: var(--bg-main);">
                    <strong id="deleteMachineNameDisplay"></strong> <br>
                    <small class="text-secondary" id="deleteMachineIpDisplay"></small>
                </div>
                <p class="text-warning small"><strong class="text-danger">Attenzione:</strong> Questa azione è irreversibile.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-premium btn-blue" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-outline-premium btn-red" id="confirmDeleteButton">Elimina Definitivamente</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const openEditModalWithErrorJS = @Html.Raw(Json.Serialize(openEditModalWithErrorRazor));
        const csrfTokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        const csrfToken = csrfTokenElement ? csrfTokenElement.value : null;

        if (!csrfToken && document.querySelector('form[method="post"]')) {
            console.warn("Token CSRF non trovato! Le azioni POST potrebbero fallire.");
        }

        document.addEventListener('DOMContentLoaded', function () {
            // ---- Modal Management ----
            const editMacchinaModalEl = document.getElementById('editMacchinaModal');
            const editMacchinaModal = new bootstrap.Modal(editMacchinaModalEl);
            const editForm = document.getElementById('editMacchinaForm');
            const deleteModalEl = document.getElementById('deleteConfirmModal');
            const deleteModal = new bootstrap.Modal(deleteModalEl);
            let formToDelete = null;

            document.querySelectorAll('.edit-macchina-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const nome = this.dataset.nomeMacchina;
                    const ip = this.dataset.ipAddress;
                    document.getElementById('editOriginalNomeMacchina').value = nome;
                    document.getElementById('editOriginalIPAddress').value = ip;
                    document.getElementById('editNomeMacchina').value = nome;
                    document.getElementById('editIPAddress').value = ip;

                    editForm.querySelectorAll('.text-danger').forEach(el => el.textContent = '');
                    editForm.querySelectorAll('.alert').forEach(el => el.remove());
                    editMacchinaModal.show();
                });
            });

            document.querySelectorAll('.open-delete-modal-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    formToDelete = this.closest('form.delete-form');
                    if (formToDelete) {
                        document.getElementById('deleteMachineNameDisplay').textContent = formToDelete.dataset.nomeMacchina;
                        document.getElementById('deleteMachineIpDisplay').textContent = formToDelete.dataset.ipAddress;
                        deleteModal.show();
                    }
                });
            });

            document.getElementById('confirmDeleteButton').addEventListener('click', function () {
                if (formToDelete) {
                    formToDelete.submit();
                }
                deleteModal.hide();
            });

            if (openEditModalWithErrorJS) {
                editMacchinaModal.show();
            }

            // ---- Auto-close Alerts ----
            setTimeout(() => {
                document.querySelectorAll('.alert-dismissible').forEach(alert => new bootstrap.Alert(alert).close());
            }, 7000);

            // ---- Ping & Status Notification ----
            const PING_INTERVAL = 10000;
            const tbody = document.getElementById('macchineTableBody');
            let clientStatus = {};

            async function notifyServer(nome, ip, online) {
                if (!csrfToken) return;
                try {
                    await fetch('/Home/NotifyTelegramOfStatusChange', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': csrfToken
                        },
                        body: JSON.stringify({ NomeMacchina: nome, IpAddress: ip, IsNowOnline: online })
                    });
                } catch (e) {
                    console.error('Notify error:', e);
                }
            }

            async function checkIp(ip, nome, rowId) {
                const row = document.getElementById(rowId);
                if (!row) return;

                const statusIndicator = row.querySelector('.status-badge');
                let isOnline = false;
                try {
                    const resp = await fetch(`/Home/PingIpAddress?ipAddress=${encodeURIComponent(ip)}`);
                    isOnline = resp.ok ? (await resp.json()).reachable : false;
                } catch {
                    isOnline = false;
                }

                // Update UI
                row.classList.toggle('status-offline', !isOnline);
                if(statusIndicator) {
                    statusIndicator.classList.remove('online', 'offline');
                    statusIndicator.classList.add(isOnline ? 'online' : 'offline');
                    statusIndicator.textContent = isOnline ? 'Online' : 'Offline';
                    statusIndicator.title = isOnline ? 'Online' : 'Offline';
                }

                if (clientStatus[ip] !== isOnline) {
                    await notifyServer(nome, ip, isOnline);
                }
                clientStatus[ip] = isOnline;
            }

            function doAllPings() {
                if (!tbody) return;
                tbody.querySelectorAll('tr[data-ip]').forEach(row => {
                    checkIp(row.dataset.ip, row.dataset.nomeMacchina, row.id);
                });
            }

            if (tbody && tbody.querySelectorAll('tr[data-ip]').length) {
                doAllPings();
                setInterval(doAllPings, PING_INTERVAL);
            }

            // ---- Table Sorting ----
            const table = document.getElementById('macchineTable');
            if (table) {
                const headers = table.querySelectorAll('thead th.sortable');
                const tBody = table.querySelector('tbody');

                headers.forEach(header => {
                    header.addEventListener('click', () => {
                        const colIndex = parseInt(header.dataset.column, 10);
                        const sortType = header.dataset.sortType;
                        const isAsc = !header.classList.contains('sorted-asc');

                        headers.forEach(h => {
                            h.classList.remove('sorted-asc', 'sorted-desc');
                            h.querySelector('.sort-arrow').textContent = '';
                        });

                        header.classList.add(isAsc ? 'sorted-asc' : 'sorted-desc');
                        header.querySelector('.sort-arrow').textContent = isAsc ? '▲' : '▼';

                        const rows = Array.from(tBody.querySelectorAll('tr'));
                        rows.sort((a, b) => {
                            const aCell = a.children[colIndex];
                            const bCell = b.children[colIndex];
                            if (!aCell || !bCell) return 0;

                            const aText = aCell.textContent.trim();
                            const bText = bCell.textContent.trim();
                            let cmp = 0;

                            if (sortType === 'ip') {
                                const ipToNum = ip => ip.split('.').map(Number).reduce((acc, val) => (acc << 8) + val, 0);
                                cmp = ipToNum(aText) - ipToNum(bText);
                            } else { // alpha
                                cmp = aText.localeCompare(bText, undefined, { numeric: true, sensitivity: 'base' });
                            }
                            return isAsc ? cmp : -cmp;
                        });
                        rows.forEach(r => tBody.appendChild(r));
                    });
                });
            }
        });
    </script>
}
