@model Online.Models.IndexViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Gestione Macchine";

    // Gestione della riapertura della modale di modifica in caso di errori di validazione dal server.
    var openEditModalWithErrorRazor = TempData["OpenEditModal"] as bool? ?? false;
    Online.Models.MacchinaEditModel modalEditModel;

    if (openEditModalWithErrorRazor)
    {
        modalEditModel = new Online.Models.MacchinaEditModel
        {
            OriginalNomeMacchina = TempData["EditModel_OriginalNomeMacchina"] as string,
            OriginalIP_Address = TempData["EditModel_OriginalIP_Address"] as string,
            NomeMacchina = TempData["EditModel_NomeMacchina"] as string,
            IP_Address = TempData["EditModel_IP_Address"] as string
        };
        // Manteniamo i dati per un eventuale refresh, se necessario.
        TempData.Keep();
    }
    else
    {
        modalEditModel = new Online.Models.MacchinaEditModel();
    }
}

<link href="~/css/site.css" rel="stylesheet" asp-append-version="true">
<script src="~/js/toast.js" asp-append-version="true"></script>

<div class="page-header fade-in">
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="text-gradient mb-2">@ViewData["Title"]</h1>
                <p class="text-muted mb-0">Monitora e gestisci le tue macchine industriali in tempo reale</p>
            </div>
            <div class="header-actions">
                <button class="btn btn-outline" onclick="refreshAllMachines()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z" />
                    </svg>
                    Aggiorna Stato
                </button>
                <a href="@Url.Action("ExportToCsv")" class="btn btn-outline-success" id="exportCsvLink">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z" />
                    </svg>
                    Esporta CSV
                </a>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row g-4">
        <div class="col-xl-8 col-lg-7">
            <div class="glass-card slide-up">
                <div class="glass-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2"><path d="M12,3C7.58,3 4,4.79 4,7C4,9.21 7.58,11 12,11C16.42,11 20,9.21 20,7C20,4.79 16.42,3 12,3M4,9V12C4,14.21 7.58,16 12,16C16.42,16 20,14.21 20,12V9C20,11.21 16.42,13 12,13C7.58,13 4,11.21 4,9M4,14V17C4,19.21 7.58,21 12,21C16.42,21 20,19.21 20,17V14C20,16.21 16.42,18 12,18C7.58,18 4,16.21 4,14Z" /></svg>
                            Macchine Monitorate
                            <span class="badge ms-2" id="machineCount">@(Model.Macchine?.Count() ?? 0)</span>
                        </h4>
                        <div class="table-controls">
                            <button class="btn btn-sm btn-outline" onclick="toggleSort('name')" id="sortName"><svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor"><path d="M18 21L14 17H17V7H14L18 3L22 7H19V17H22M2 19V17H12V19H2M2 13V11H9V13H2M2 7V5H6V7H2Z" /></svg> Nome</button>
                            <button class="btn btn-sm btn-outline" onclick="toggleSort('ip')" id="sortIp"><svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor"><path d="M18 21L14 17H17V7H14L18 3L22 7H19V17H22M2 19V17H12V19H2M2 13V11H9V13H2M2 7V5H6V7H2Z" /></svg> IP</button>
                        </div>
                    </div>
                </div>
                <div class="glass-body p-0">
                    <div class="table-responsive">
                        <table class="table-modern" id="macchineTable">
                            <thead>
                                <tr>
                                    <th style="width: 40%">Nome Macchina</th>
                                    <th style="width: 25%">Indirizzo IP</th>
                                    <th style="width: 20%">Stato Connessione</th>
                                    <th style="width: 15%" class="text-center">Azioni</th>
                                </tr>
                            </thead>
                            <tbody id="macchineTableBody">
                                @if (Model.Macchine != null && Model.Macchine.Any())
                                {
                                    @foreach (var item in Model.Macchine)
                                    {
                                        <tr id="row-@item.NomeMacchina.Replace(" ", "-").Replace('.', '-')-@item.IP_Address.Replace('.', '-')"
                                            data-ip="@item.IP_Address"
                                            data-nome-macchina="@item.NomeMacchina"
                                            class="machine-row">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="machine-icon me-3"><svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12,3C7.58,3 4,4.79 4,7C4,9.21 7.58,11 12,11C16.42,11 20,9.21 20,7C20,4.79 16.42,3 12,3M4,9V12C4,14.21 7.58,16 12,16C16.42,16 20,14.21 20,12V9C20,11.21 16.42,13 12,13C7.58,13 4,11.21 4,9M4,14V17C4,19.21 7.58,21 12,21C16.42,21 20,19.21 20,17V14C20,16.21 16.42,18 12,18C7.58,18 4,16.21 4,14Z" /></svg></div>
                                                    <div>
                                                        <div class="machine-name">@Html.DisplayFor(m => item.NomeMacchina)</div>
                                                        <div class="machine-meta text-muted">ID: @item.NomeMacchina.GetHashCode().ToString("X8")</div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <code class="ip-address">@Html.DisplayFor(m => item.IP_Address)</code>
                                                    <button class="btn btn-sm btn-icon ms-2" onclick="copyToClipboard('@item.IP_Address')" title="Copia IP"><svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg></button>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="status-indicator status-checking" id="status-@item.IP_Address.Replace('.', '-')">
                                                    <span class="status-text">Verificando...</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="action-buttons d-flex justify-content-center gap-2">
                                                    <button type="button" class="btn btn-sm btn-icon btn-outline edit-machine-btn" data-bs-toggle="modal" data-bs-target="#editMacchinaModal" data-nome-macchina="@item.NomeMacchina" data-ip-address="@item.IP_Address" title="Modifica Macchina"><svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg></button>
                                                    <form asp-action="Delete" method="post" class="delete-form d-inline" data-nome-macchina="@item.NomeMacchina" data-ip-address="@item.IP_Address">
                                                        <input type="hidden" name="nomeMacchina" value="@item.NomeMacchina" />
                                                        <input type="hidden" name="ipAddress" value="@item.IP_Address" />
                                                        @Html.AntiForgeryToken()
                                                        <button type="button" class="btn btn-sm btn-icon btn-outline-danger open-delete-modal-btn" title="Elimina Macchina" data-bs-toggle="modal" data-bs-target="#deleteConfirmModal"><svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor"><path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg></button>
                                                    </form>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center py-5">
                                            <div class="empty-state">
                                                <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" class="text-muted mb-3"><path d="M12,3C7.58,3 4,4.79 4,7C4,9.21 7.58,11 12,11C16.42,11 20,9.21 20,7C20,4.79 16.42,3 12,3M4,9V12C4,14.21 7.58,16 12,16C16.42,16 20,14.21 20,12V9C20,11.21 16.42,13 12,13C7.58,13 4,11.21 4,9M4,14V17C4,19.21 7.58,21 12,21C16.42,21 20,19.21 20,17V14C20,16.21 16.42,18 12,18C7.58,18 4,16.21 4,14Z" /></svg>
                                                <h5>Nessuna macchina configurata</h5>
                                                <p class="text-muted">Aggiungi la tua prima macchina per iniziare il monitoraggio</p>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-lg-5">
            <div class="glass-card slide-up mb-4">
                <div class="glass-header">
                    <h4 class="mb-0"><svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2"><path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" /></svg> Aggiungi Macchina</h4>
                </div>
                <div class="glass-body">
                    <form asp-action="Create" method="post" id="addMachineForm">
                        @Html.AntiForgeryToken()
                        <div class="mb-4">
                            <label asp-for="NuovaMacchina.NomeMacchina" class="form-label">Nome Macchina</label>
                            <input asp-for="NuovaMacchina.NomeMacchina" class="form-control" placeholder="es. Pressa Idraulica 1" />
                            <span asp-validation-for="NuovaMacchina.NomeMacchina" class="text-danger"></span>
                        </div>
                        <div class="mb-4">
                            <label asp-for="NuovaMacchina.IP_Address" class="form-label">Indirizzo IP</label>
                            <input asp-for="NuovaMacchina.IP_Address" class="form-control" placeholder="192.168.1.100" />
                            <span asp-validation-for="NuovaMacchina.IP_Address" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-success w-100"><svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" /></svg> Aggiungi Macchina</button>
                    </form>
                </div>
            </div>

            <div class="glass-card scale-in">
                <div class="glass-header">
                    <h4 class="mb-0"><svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2"><path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z" /></svg> Importa da CSV</h4>
                </div>
                <div class="glass-body">
                    <form asp-action="ImportFromCsv" method="post" enctype="multipart/form-data" id="importForm">
                        @Html.AntiForgeryToken()
                        <div class="mb-4">
                            <label for="csvFile" class="form-label">File CSV</label>
                            <div class="file-upload-area" id="fileUploadArea">
                                <input type="file" name="csvFile" id="csvFile" class="d-none" accept=".csv" required />
                                <div class="file-upload-placeholder">
                                    <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor" class="text-muted mb-2"><path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z" /></svg>
                                    <p class="mb-1">Seleziona file CSV</p>
                                    <small class="text-muted">o trascina qui il file</small>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-outline w-100"><svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z" /></svg> Importa Macchine</button>
                        <small class="form-text d-block mt-2">Formato richiesto: <code>NomeMacchina,IP_Address</code></small>
                    </form>
                </div>
            </div>

            <div class="glass-card fade-in mt-4">
                <div class="glass-header">
                    <h4 class="mb-0"><svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2"><path d="M22,21H2V3H4V19H6V17H10V19H12V16H16V19H18V17H22V21Z" /></svg> Statistiche</h4>
                </div>
                <div class="glass-body">
                    <div class="stats-grid">
                        <div class="stat-item"><div class="stat-value" id="totalMachines">@(Model.Macchine?.Count() ?? 0)</div><div class="stat-label">Totale Macchine</div></div>
                        <div class="stat-item"><div class="stat-value status-online" id="onlineMachines">-</div><div class="stat-label">Online</div></div>
                        <div class="stat-item"><div class="stat-value status-offline" id="offlineMachines">-</div><div class="stat-label">Offline</div></div>
                        <div class="stat-item"><div class="stat-value" id="lastUpdate">-</div><div class="stat-label">Ultimo Aggiornamento</div></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_MachineModals", modalEditModel)

<link href="~/css/page-specific/machine-management.css" rel="stylesheet" asp-append-version="true" />

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // ============================================
        // DASHBOARD JAVASCRIPT - REFACTORED
        // ============================================
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Dashboard JS Inizializzato');

            // --- VARIABLES ---
            const openEditModalWithErrorJS = @openEditModalWithErrorRazor.ToString().ToLower();
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            let clientStatus = {};
            let sortOrder = { name: 'asc', ip: 'asc' };
            const PING_INTERVAL = 10000; // 10 secondi

            // --- INITIALIZERS ---
            initializeModals();
            initializeFileUpload();
            initializeMachineMonitoring();
            initializeUtilityFunctions();
            initializeFormSubmissions();

            // --- LOGIC ---
            if (openEditModalWithErrorJS) {
                const editModal = bootstrap.Modal.getOrCreateInstance(document.getElementById('editMacchinaModal'));
                editModal.show();
            }

            // ============================================
            // MODAL INITIALIZATION
            // ============================================
            function initializeModals() {
                let formToDelete = null;

                // Edit modal population
                document.querySelectorAll('.edit-machine-btn').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const nome = this.dataset.nomeMacchina;
                        const ip = this.dataset.ipAddress;

                        document.getElementById('editOriginalNomeMacchina').value = nome;
                        document.getElementById('editOriginalIPAddress').value = ip;
                        document.getElementById('editNomeMacchina').value = nome;
                        document.getElementById('editIPAddress').value = ip;

                        // Trigger input event to update the live preview in the modal
                        document.getElementById('editNomeMacchina').dispatchEvent(new Event('input'));
                        document.getElementById('editIPAddress').dispatchEvent(new Event('input'));

                        clearFormErrors(document.getElementById('editMacchinaForm'));
                    });
                });

                // Delete modal preparation
                document.querySelectorAll('.open-delete-modal-btn').forEach(btn => {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        formToDelete = this.closest('form.delete-form');
                        if (formToDelete) {
                            document.getElementById('deleteMachineNameDisplay').textContent = formToDelete.dataset.nomeMacchina;
                            document.getElementById('deleteMachineIpDisplay').textContent = formToDelete.dataset.ipAddress;
                        }
                    });
                });

                // Confirm delete action
                document.getElementById('confirmDeleteButton')?.addEventListener('click', function () {
                    if (formToDelete) {
                        Toast.loading('Eliminazione in corso...');
                        formToDelete.submit();
                    }
                });
            }

            // ============================================
            // FILE UPLOAD
            // ============================================
            function initializeFileUpload() {
                const area = document.getElementById('fileUploadArea');
                const input = document.getElementById('csvFile');
                if (!area || !input) return;

                const preventDefaults = e => { e.preventDefault(); e.stopPropagation(); };

                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(e => area.addEventListener(e, preventDefaults));
                ['dragenter', 'dragover'].forEach(e => area.addEventListener(e, () => area.classList.add('dragover')));
                ['dragleave', 'drop'].forEach(e => area.addEventListener(e, () => area.classList.remove('dragover')));

                area.addEventListener('click', () => input.click());
                input.addEventListener('change', () => handleFiles(input.files));
                area.addEventListener('drop', e => handleFiles(e.dataTransfer.files));

                function handleFiles(files) {
                    if (files.length > 0) {
                        input.files = files;
                        updateFileUploadDisplay(files[0]);
                    }
                }

                function updateFileUploadDisplay(file) {
                    const placeholder = area.querySelector('.file-upload-placeholder');
                    placeholder.innerHTML = `
                        <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor" class="text-success mb-2"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"/></svg>
                        <p class="mb-1 text-success">File selezionato</p>
                        <small class="text-muted">${file.name} (${formatFileSize(file.size)})</small>`;
                }
            }

            // ============================================
            // MACHINE MONITORING
            // ============================================
            function initializeMachineMonitoring() {
                const rows = document.querySelectorAll('tr[data-ip]');
                if (rows.length === 0) {
                    console.log('Nessuna macchina da monitorare.');
                    return;
                }
                doAllPings();
                setInterval(doAllPings, PING_INTERVAL);
                updateLastUpdateTime();
                setInterval(updateLastUpdateTime, 1000); // Aggiorna l'orologio ogni secondo
            }

            async function doAllPings() {
                const rows = document.querySelectorAll('tr[data-ip]');
                const promises = Array.from(rows).map(row => checkMachineStatus(row));
                await Promise.allSettled(promises);
                updateStatistics();
                updateLastUpdateTime();
            }

            async function checkMachineStatus(row) {
                const ip = row.dataset.ip;
                const statusElement = document.getElementById(`status-${ip.replace(/\./g, '-')}`);
                if (!statusElement) return;

                let isOnline = false;
                try {
                    const response = await fetch(`/Home/PingIpAddress?ipAddress=${encodeURIComponent(ip)}`);
                    if (response.ok) {
                        const data = await response.json();
                        isOnline = data.reachable;
                    }
                } catch (error) {
                    console.warn(`Ping failed for ${ip}:`, error);
                }

                updateMachineStatusUI(row, statusElement, isOnline);

                if (clientStatus[ip] !== undefined && clientStatus[ip] !== isOnline) {
                    notifyServerStatusChange(row.dataset.nomeMacchina, ip, isOnline);
                }
                clientStatus[ip] = isOnline;
            }

            function updateMachineStatusUI(row, statusElement, isOnline) {
                row.classList.toggle('status-offline', !isOnline);
                row.classList.toggle('status-online', isOnline);
                statusElement.className = `status-indicator ${isOnline ? 'status-online' : 'status-offline'}`;
                statusElement.innerHTML = `<span class="status-text">${isOnline ? 'Online' : 'Offline'}</span>`;
            }

            async function notifyServerStatusChange(nome, ip, isOnline) {
                if (!csrfToken) return;
                try {
                    await fetch('/Home/NotifyTelegramOfStatusChange', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken },
                        body: JSON.stringify({ NomeMacchina: nome, IpAddress: ip, IsNowOnline: isOnline })
                    });
                } catch (error) {
                    console.error('Failed to notify server:', error);
                }
            }

            function updateStatistics() {
                const total = document.querySelectorAll('tr[data-ip]').length;
                const online = document.querySelectorAll('.status-indicator.status-online').length;
                const offline = total - online;

                document.getElementById('totalMachines').textContent = total;
                document.getElementById('onlineMachines').textContent = online;
                document.getElementById('offlineMachines').textContent = offline;
                document.getElementById('machineCount').textContent = total;
            }

            function updateLastUpdateTime() {
                 const timeString = new Date().toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                 document.getElementById('lastUpdate').textContent = timeString;
            }

            // ============================================
            // UTILITY FUNCTIONS & EVENT HANDLERS
            // ============================================
            function initializeUtilityFunctions() {
                 window.copyToClipboard = function(text) {
                    navigator.clipboard.writeText(text).then(() => {
                        Toast.success(`IP ${text} copiato`, 'Copiato!', 2000);
                    }).catch(() => Toast.error('Copia fallita'));
                 };

                 window.refreshAllMachines = function() {
                    const btn = event.target.closest('button');
                    const originalContent = btn.innerHTML;
                    setButtonLoading(btn, 'Aggiornando...');
                    doAllPings().finally(() => {
                        resetButtonLoading(btn, originalContent);
                        Toast.success('Stato macchine aggiornato');
                    });
                 };

                 window.toggleSort = function(column) {
                    const tbody = document.getElementById('macchineTableBody');
                    const rows = Array.from(tbody.querySelectorAll('tr[data-ip]'));
                    sortOrder[column] = sortOrder[column] === 'asc' ? 'desc' : 'asc';

                    rows.sort((a, b) => {
                        let valA = (column === 'name') ? a.dataset.nomeMacchina.toLowerCase() : a.dataset.ip.split('.').map(n => n.padStart(3,'0')).join('');
                        let valB = (column === 'name') ? b.dataset.nomeMacchina.toLowerCase() : b.dataset.ip.split('.').map(n => n.padStart(3,'0')).join('');
                        return (sortOrder[column] === 'asc') ? valA.localeCompare(valB) : valB.localeCompare(valA);
                    });

                    rows.forEach(row => tbody.appendChild(row));
                    updateSortIndicators(column);
                 };

                 document.getElementById('exportCsvLink')?.addEventListener('click', function(e) {
                    e.preventDefault();
                    Toast.loading('Generazione CSV...', 'Download');
                    window.location.href = this.href;
                 });
            }

            // ============================================
            // HELPER FUNCTIONS
            // ============================================
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024, sizes = ['Bytes', 'KB', 'MB', 'GB'], i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            function clearFormErrors(form) {
                form?.querySelectorAll('.text-danger').forEach(e => e.textContent = '');
                form?.querySelectorAll('.is-invalid').forEach(e => e.classList.remove('is-invalid'));
            }

            function setButtonLoading(btn, text = 'Loading...') {
                btn.disabled = true;
                btn.innerHTML = `<div class="spinner-border spinner-border-sm me-2" role="status"><span class="visually-hidden">Loading...</span></div> ${text}`;
            }

            function resetButtonLoading(btn, originalContent) {
                btn.disabled = false;
                btn.innerHTML = originalContent;
            }

            function initializeFormSubmissions() {
                 ['addMachineForm', 'importForm', 'editMacchinaForm'].forEach(formId => {
                    const form = document.getElementById(formId);
                    if (form) {
                        form.addEventListener('submit', function() {
                            const submitBtn = form.querySelector('button[type="submit"]');
                            if (submitBtn) {
                                const originalText = submitBtn.innerHTML;
                                setButtonLoading(submitBtn, 'Salvataggio...');
                                setTimeout(() => resetButtonLoading(submitBtn, originalText), 10000); // Fallback
                            }
                        });
                    }
                 });
            }

             function updateSortIndicators(activeColumn) {
                document.querySelectorAll('.table-controls button').forEach(btn => {
                    btn.classList.remove('btn-primary');
                    btn.classList.add('btn-outline');
                });
                const activeBtn = document.getElementById(`sort${activeColumn.charAt(0).toUpperCase() + activeColumn.slice(1)}`);
                if (activeBtn) {
                    activeBtn.classList.remove('btn-outline');
                    activeBtn.classList.add('btn-primary');
                }
            }
        });
    </script>
}